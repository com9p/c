// server.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

void handle_client(int client_socket) {
    char buffer[BUFFER_SIZE] = {0};
    int bytes_read;

    while ((bytes_read = read(client_socket, buffer, BUFFER_SIZE)) > 0) {
        printf("Client: %s\n", buffer);
        send(client_socket, buffer, bytes_read, 0);
        memset(buffer, 0, BUFFER_SIZE);
    }

    close(client_socket);
}

int main() {
    int server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len = sizeof(client_addr);

    // Create socket
    if ((server_socket = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket failed");
        exit(EXIT_FAILURE);
    }

    // Bind socket
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    // Listen for connections
    if (listen(server_socket, 3) < 0) {
        perror("Listen failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d\n", PORT);

    // Accept and handle client connections
    while ((client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &addr_len)) >= 0) {
        printf("Accepted connection from %s:%d\n",
               inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
        handle_client(client_socket);
    }

    if (client_socket < 0) {
        perror("Accept failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    close(server_socket);
    return 0;
}




















// client.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int client_socket;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE] = {0};
    char message[BUFFER_SIZE];

    // Create socket
    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation error");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);

    // Convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr) <= 0) {
        perror("Invalid address/Address not supported");
        close(client_socket);
        exit(EXIT_FAILURE);
    }

    // Connect to server
    if (connect(client_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection Failed");
        close(client_socket);
        exit(EXIT_FAILURE);
    }

    // Communicate with server
    while (1) {
        printf("Enter message: ");
        fgets(message, BUFFER_SIZE, stdin);
        send(client_socket, message, strlen(message), 0);
        memset(buffer, 0, BUFFER_SIZE);
        read(client_socket, buffer, BUFFER_SIZE);
        printf("Server: %s\n", buffer);
    }

    close(client_socket);
    return 0;
}




























// menu.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pwd.h>

void show_menu() {
    printf("1. Print the date\n");
    printf("2. Print the current working directory\n");
    printf("3. Print the username\n");
    printf("4. Exit\n");
    printf("Please enter your choice [1-4]: ");
}

int main() {
    int choice;
    char cwd[1024];
    struct passwd *pw;

    while (1) {
        show_menu();
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                system("date");
                break;
            case 2:
                if (getcwd(cwd, sizeof(cwd)) != NULL) {
                    printf("The current working directory is: %s\n", cwd);
                } else {
                    perror("getcwd() error");
                }
                break;
            case 3:
                pw = getpwuid(getuid());
                printf("The username is: %s\n", pw->pw_name);
                break;
            case 4:
                printf("Exiting the program. Goodbye!\n");
                exit(0);
            default:
                printf("Invalid choice, please select a valid option.\n");
        }
        printf("\n");
    }

    return 0;
}












15
 int main () {
 printf ("%s %ld\n%s %ld\n%s %ld\n%s %ld\n%s %ld\n",
 "The number of clock ticks
 "Maximum PATH length
 "Maximum number of Child Process
 : ", sysconf (_SC_CLK_TCK),
 : ", pathconf ("/", _PC_PATH_MAX),
 : ", sysconf (_SC_CHILD_MAX),
 "Maximum number of Chracters in a file name : ", pathconf ("/", _PC_NAME_MAX),
 "Maximum number of open files or process
 : ", sysconf (_SC_OPEN_MAX)
 );
 return 0;
 }




16
 int main() {
 printf("POSIX version: %ld\n", sysconf (_SC_VERSION));
 














#include <stdio.h>
#include <unistd.h>
#include <limits.h>

int main() {
    // i. Number of clock ticks
    long clock_ticks = sysconf(_SC_CLK_TCK);
    if (clock_ticks == -1) {
        perror("Failed to get clock ticks");
    } else {
        printf("i. Number of clock ticks per second: %ld\n", clock_ticks);
    }

    // ii. Maximum path length
    long path_max = pathconf("/", _PC_PATH_MAX);
    if (path_max == -1) {
        perror("Failed to get maximum path length");
    } else {
        printf("ii. Maximum path length: %ld\n", path_max);
    }

    // iii. Maximum number of child processes
    long max_child_procs = sysconf(_SC_CHILD_MAX);
    if (max_child_procs == -1) {
        perror("Failed to get maximum number of child processes");
    } else {
        printf("iii. Maximum number of child processes: %ld\n", max_child_procs);
    }

    // iv. Maximum number of characters in a file name
    long name_max = pathconf("/", _PC_NAME_MAX);
    if (name_max == -1) {
        perror("Failed to get maximum file name length");
    } else {
        printf("iv. Maximum number of characters in a file name: %ld\n", name_max);
    }

    // v. Maximum number of open files per process
    long max_open_files = sysconf(_SC_OPEN_MAX);
    if (max_open_files == -1) {
        perror("Failed to get maximum number of open files per process");
    } else {
        printf("v. Maximum number of open files per process: %ld\n", max_open_files);
    }

    return 0;
}













